import etree.ElementTree as etree

from anki import notes, consts
from aqt import mw, utils

import os
import copy

#############################################################
### Get Anki data from XML elements:
#############################################################
def get_model_vers(elt):
    if elt.text == "[]": return []
    else: raise Exception("vers not supported!")

def get_model_did(elt):
    return get_integer(elt)

def get_model_type(elt):
    txt = elt.text
    if txt == "MODEL_STD": return consts.MODEL_STD
    elif txt == "MODEL_CLOZE": return consts.MODEL_CLOZE
    else:
        try: return int(txt)
        except: raise Exception("model type must be either 'MODEL_STD', 'MODEL_CLOZE' or an integer")

def as_string(elt):
    return elt.text

def get_model_template(elt): pass

def get_bool(elt):
    if elt.text == "True": return True
    elif elt.text == "False": return False
    else: raise Exception("Invalid literal for Boolean!")
    
def get_integer(elt): return int(elt.text)
def get_field_media(elt): return []

def get_ord(elt):
    txt = elt.text
    if txt == "None": return None
    else:
        try: return int(txt)
        except: raise Exception("ord must be an integer or None!")


def content2string(elt):
    return "".join([elt.text] + [etree.tostring(e) for e in elt])


def get_model_did(elt): int(elt.text)

#########################################################################
### Dictionaries of attributes for Models, Templates, Fields, and Notes:
#########################################################################
model_dict = {'name': as_string,
              'sortf': get_integer,
              'latexPre': as_string,
              'latexPost': as_string,
              'usn': get_integer,
              'vers': get_integer,
              'type': get_model_type,
              'css': as_string}

field_dict = {'name': as_string,
              'ord': get_ord,
              'sticky': get_bool,
              'rtl': get_bool,
              'font': as_string,
              'size': get_integer,
              'media': get_field_media}

template_dict = {'name': as_string,
                 'ord': get_ord,
                 'qfmt': content2string,
                 'afmt': content2string,
                 'bqfmt': content2string,
                 'bafmt': content2string}
#############################################################

def handle_command(path):
    cmd = etree.parse(path).getroot()
    command_dict[cmd.get('name')](cmd)
    os.remove(path)

def notes_added_message(nrOfModels, nrOfNotes):
    if nrOfModels == 1:
        if nrOfNotes == 1:
            msg = "<b>1 model</b> and <b>1 note</b> were added to by Inkscape"
        else:
            msg = "<b>1 model</b> and <b>{0} notes</b> were added by Inkscape".format(nrOfNotes)
    else:
        if nrOfNotes == 1:
            msg = "<b>{0} models</b> and <b>1 note</b> were added to by Inkscape".format(nrOfModels)
        else:
            msg = "<b>{0} models</b> and <b>{1} notes</b> were added by Inkscape".format(nrOfModels, nrOfNotes)
    return msg


def run_add_notes(cmd):
    col = mw.col
    models = cmd.find('models')
    nrOfModels = add_models(col, models)
    notes = cmd.find('notes')
    try: media_dir = notes.find('media-dir').text
    except: media_dir = None
    (notes_, media) = handle_media(col, notes, media_dir)
    nrOfNotes = add_notes(col, notes_)
    rm_media_dir(media_dir, media) # removes the media and the directory      
    mw.deckBrowser.show()
    utils.tooltip(notes_added_message(nrOfModels, nrOfNotes))

def rm_media_dir(media_dir, media):
    for f in media:
        try: os.remove(os.path.join(media_dir, f))
        except: pass
    try: os.rmdir(media_dir)
    except: pass

def add_notes(col, notes):
    nrOfNotes = 0
    for note in notes.findall('note'):
        add_note(col, note)
        nrOfNotes += 1
    return nrOfNotes

def add_note(col, note):
    model_name = note.find('model').text
    tags = [tag.text for tag in note.find('tags').findall('tag')]
    
    m = col.models.byName(model_name)
    m['did'] = col.conf['curDeck']

    n = notes.Note(col, model=m)
    n.did = col.conf['curDeck']
    n.fields =\
      [content2string(field.find('content')) for field in note.find('fields').findall('field')]
    
    for tag in tags:
        n.addTag(tag)

    col.addNote(n)
    return n

def get_as_attribs(d, elt):
    map = {}
    for key in d.keys():
        value = elt.find(key)
        if value is not None:
            map[key] = d[key](value)
    return map

def add_models(col, models):
    nrOfModels = 0
    for model in models.findall('model'):
        m = col.models.byName(model.find('name').text)
        if m is None:
            m = add_model(col, model)
            nrOfModels += 1
    return nrOfModels

def add_model(col, model):
    mm = col.models
    m = mm.new(model.find('name').text)
    # Parse and add fields:
    for field in model.find('fields').findall('field'):
        fm = mm.newField(field.find('name').text)
        attrs = get_as_attribs(field_dict, field)
        fm.update(attrs)
        mm.addField(m, fm)
    # Parse and add templates    
    for template in model.find('templates').findall('template'):
        t = mm.newTemplate(template.find('name').text)
        attrs = get_as_attribs(template_dict, template)
        t.update(attrs)
        mm.addTemplate(m, t)
    # Parse and add remaining attributes
    attrs = get_as_attribs(model_dict, model)
    m.update(attrs)
    # Add model to collection:
    mm.add(m)
    return m
###############################################################
def handle_media(col, notes, media_dir):
    media = []
    new_notes = copy.deepcopy(notes)
    # images:
    for e in new_notes.iter('img'):
        media.append(e.get('src'))
        e.set('src', col.media.addFile(os.path.join(media_dir, e.get('src'))))
    # sound:
    for e in new_notes.iter('snd'):
        media.append(e.get('src'))
        e.text = "[sound:" +\
                 col.media.addFile(os.path.join(media_dir, e.get('src'))) +\
                 "]"
        e.attrib = {}
        e.tag = 'span'
    # video (equal to sound, but uses a different tag)
    for e in new_notes.iter('vid'):
        media.append(e.get('src'))
        e.text = "[sound:" +\
                 col.media.addFile(os.path.join(media_dir, e.get('src'))) +\
                 "]"
        e.attrib = {}
        e.tag = 'span'
    return (new_notes, media)

command_dict = {'add-notes': run_add_notes}